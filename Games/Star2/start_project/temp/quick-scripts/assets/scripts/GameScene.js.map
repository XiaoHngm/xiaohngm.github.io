{"version":3,"sources":["GameScene.js"],"names":["cc","Class","extends","Component","properties","pickRadius","ground","default","type","Node","player","starPrefab","Prefab","scoreDisplay","Label","scoreAudio","AudioClip","onLoad","groundY","y","height","score","isPicked","spawnNewStar","start","update","dt","star","getComponent","timer","starDuration","gameOver","getPlayerDistance","starPicked","instantiate","node","addChild","randX","Math","random","width","randY","jumpHeight","setPosition","v2","director","loadScene","playerPos","getPosition","dist","position","sub","mag","gainScore","pickedAction","setPickedAction","destroyStar","callFunc","destroy","spawnStar","runAction","sequence","string","toString","audioEngine","playEffect"],"mappings":"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","file":"GameScene.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["\r\n\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        pickRadius: 0,// 星星和主角之间的距离小于这个数值时，就会完成收集\r\n        ground: { // 地面节点，用于确定星星生成的高度\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        player: { // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n        starPrefab: { // 这个属性引用了星星预制资源\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        scoreDisplay: {\r\n            default: null,\r\n            type: cc.Label\r\n        },\r\n        scoreAudio: { // 得分音效资源\r\n            default: null,\r\n            type: cc.AudioClip\r\n        },\r\n    },\r\n\r\n    onLoad: function () {\r\n        // 获取地平面的 y 轴坐标\r\n        this.groundY = this.ground.y + this.ground.height/2;\r\n        // 初始化计时器\r\n        this.score = 0;\r\n        this.isPicked = false;\r\n        // 生成一个新的星星\r\n        this.spawnNewStar();\r\n    },\r\n\r\n    start: function () {\r\n\r\n    },\r\n\r\n    update: function (dt) {\r\n        if (!this.isPicked) { // 还没有摘到星星\r\n            if (this.star.getComponent('Star').timer > this.star.getComponent('Star').starDuration) { //超过时限\r\n                this.gameOver(); // 调用游戏结束\r\n            } else if (this.getPlayerDistance() < this.pickRadius) { //判断星星和主角之间的距离是否小于收集距离\r\n                this.starPicked(); //调用收集行为\r\n            }\r\n        }\r\n    },\r\n\r\n    spawnNewStar: function() {\r\n        // 使用给定的模板在场景中生成一个新节点\r\n        this.star = cc.instantiate(this.starPrefab);\r\n        // 将新增的节点添加到 Canvas 节点下面\r\n        this.node.addChild(this.star);\r\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\r\n        var randX = (Math.random() - 0.5) * this.node.width;\r\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\r\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight + 50;\r\n        this.star.setPosition(cc.v2(randX, randY));\r\n\r\n        this.isPicked = false;\r\n    },\r\n\r\n    gameOver: function () {\r\n        //this.player.stopAllActions(); //停止 player 节点的跳跃动作\r\n        cc.director.loadScene('game over scene');\r\n    },\r\n\r\n    getPlayerDistance: function () {\r\n        // 得到 player 节点位置\r\n        var playerPos = this.player.getPosition();\r\n        // 根据player和star两节点位置计算两点之间距离\r\n        var dist = this.star.position.sub(playerPos).mag();\r\n        return dist;\r\n    },\r\n\r\n    starPicked: function() {\r\n        // 调用 Game 脚本的得分方法\r\n        this.gainScore();\r\n        // 动画\r\n        var pickedAction = this.star.getComponent('Star').setPickedAction();\r\n        // 然后销毁当前星星节点\r\n        var destroyStar = cc.callFunc(function () {\r\n            this.star.destroy();\r\n        }, this);\r\n        // 生成一个新的星星\r\n        var spawnStar = cc.callFunc(function () {\r\n            this.spawnNewStar();\r\n        }, this);\r\n        this.star.runAction(cc.sequence(pickedAction, destroyStar, spawnStar));\r\n    },\r\n\r\n    gainScore: function () {\r\n        this.score += 1;\r\n        this.isPicked = true;\r\n        // 更新 scoreDisplay Label 的文字\r\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\r\n        // 播放得分音效\r\n        cc.audioEngine.playEffect(this.scoreAudio, false);\r\n    },\r\n});\r\n"]}